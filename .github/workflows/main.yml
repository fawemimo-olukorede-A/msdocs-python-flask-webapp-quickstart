name: Deploy Infrastructure and Application to Azure

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: Akscluster-rsg
  LOCATION: eastus  # or your preferred Azure region
  BICEP_FILE_PATH: kubernetes/main.bicep  # Update this to your Bicep file path
  DOCKER_IMAGE_NAME: your-app-name
  DOCKER_FILE_PATH: Dockerfile

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy Bicep file
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
        template: ${{ env.BICEP_FILE_PATH }}
        failOnStdErr: false

    - name: Get AKS and ACR info
      run: |
        AKS_NAME=$(az aks list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[0].name" -o tsv)
        ACR_NAME=$(az acr list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[0].name" -o tsv)
        echo "AKS_CLUSTER_NAME=$AKS_NAME" >> $GITHUB_ENV
        echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV

  build-and-deploy:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build and push image to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_NAME }}.azurecr.io
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_SECRET }}

    - name: Get ACR info
      run: |
          echo "Fetching ACR info..."
          ACR_NAME=$(az acr list --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --query "[0].name" -o tsv)
          if [ $? -ne 0 ]; then
          echo "Error: Failed to execute az acr list command."
          exit 1
          fi
          if [ -z "$ACR_NAME" ]; then
          echo "Error: Failed to fetch ACR name. Make sure the resource group exists and contains an Azure Container Registry."
          exit 1
          fi
           echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
           echo "ACR name set to: $ACR_NAME"
    
    - run: |
        docker buildx build --cache-from=type=registry,ref=${{ env.ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME }}:cache \
                            --cache-to=type=inline \
                            -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} \
                            -f ${{ env.DOCKER_FILE_PATH }} .
        docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
    
    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
        cluster-name: ${{ env.AKS_CLUSTER_NAME }}
    
    - name: Update Kubernetes manifests
      run: |
        sed -i 's|{{IMAGE_NAME}}|${{ env.ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}|g' kubernetes/deployment.yaml
    
    - name: Deploy to AKS
      uses: azure/k8s-deploy@v4
      with:
        manifests: |
          kubernetes/deployment.yaml
          kubernetes/service.yaml
        namespace: default

    - name: Azure Logout
      run: |
        az logout
      if: always()
